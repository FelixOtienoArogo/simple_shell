#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

/**
 *tokenner - for splitting the given string into tokens
 *
 *@lineptr: the string to be tokenised
 *
 *Return - the string containing pointers to the toekens
 */
char **tokenner(char *lineptr)
{
char **token;
int i, j, n, len;
len = strlen(lineptr);
n = 255;
i = 0;
token = malloc(sizeof(char *) * n);/*the tokens */

/*this is for determining the outcome*/
for (j = 0; j < len + 1; j++)
{
if (lineptr[j] == ' ')
{
token[i] = strtok_r(lineptr, " ", &lineptr);
break;
}
if (lineptr[j] == '\0')
{
token[i] = strtok_r(lineptr, "\r\n", &lineptr);
break;
}
}
while (token[i] == NULL)
{
token[i + 1] = strtok_r(NULL, " \0", &lineptr);
i++;
}
return (token);
}

/**
 *main - to text my own getline
 *
 *Return: Always 0
 *
 */
int main(void)
{
char *lineptr;
size_t n;
char **token;
pid_t child_pid;

while (1)
{
n = 255;
lineptr = malloc(sizeof(char) * n);/*the input string*/

/*getting the input*/
printf("($) ");
getline(&lineptr, &n, stdin);

/* forking */
child_pid = fork();
if (child_pid == -1)
{
perror("Error:");
return (1);
}
if (child_pid == 0)
{
token = tokenner(lineptr);

if (execvp(token[0], (char * const *)token) == -1)
{
perror("Error:");
}
}
/*free everything allocated */
free(lineptr);

wait(NULL);
}
return (0);
}
